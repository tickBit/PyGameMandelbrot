import pygame
import numpy as np

palette = [[3, 3, 2], [7, 7, 4], [11, 11, 6], [15, 15, 8], [19, 19, 10], [23, 23, 12], [27, 27, 14], [31, 31, 16], [35, 35, 18], [39, 39, 20], [43, 43, 22], [47, 47, 24], [51, 51, 26], [55, 55, 28], [59, 59, 30], [63, 63, 
32], [67, 67, 34], [71, 71, 36], [75, 75, 38], [79, 79, 40], [83, 83, 42], [87, 87, 44], [91, 91, 46], [95, 95, 48], [99, 99, 50], [103, 103, 52], [107, 107, 54], [111, 111, 56], [115, 115, 58], [119, 119, 60], [123, 123, 62], [127, 127, 64], [131, 131, 66], [135, 135, 68], [139, 139, 70], [143, 143, 72], [147, 147, 
74], [151, 151, 76], [155, 155, 78], [159, 159, 80], [163, 163, 82], [167, 167, 84], [171, 171, 86], [175, 175, 88], [179, 179, 90], [183, 183, 92], [187, 187, 94], [191, 191, 96], [195, 195, 98], [199, 199, 100], [203, 203, 102], [207, 207, 104], [211, 211, 106], [215, 215, 108], [219, 219, 110], [223, 223, 112], [227, 227, 114], [231, 231, 116], [235, 235, 118], [239, 239, 120], [243, 243, 122], [247, 247, 124], [251, 
251, 126], [255, 255, 128], [255, 253, 126], [255, 251, 124], [255, 249, 122], [255, 247, 120], [255, 245, 118], [255, 243, 116], [255, 241, 114], [255, 239, 112], [255, 237, 110], [255, 235, 108], [255, 233, 106], [255, 231, 104], [255, 229, 102], [255, 227, 100], [255, 225, 98], [255, 223, 96], [255, 221, 94], [255, 219, 92], [255, 217, 90], [255, 215, 88], [255, 213, 86], [255, 211, 84], [255, 209, 82], [255, 207, 80], [255, 205, 78], [255, 203, 76], [255, 201, 74], [255, 199, 72], [255, 197, 70], [255, 195, 68], [255, 193, 66], [255, 191, 64], [255, 189, 62], [255, 187, 60], [255, 185, 58], [255, 183, 56], [255, 181, 54], [255, 179, 52], [255, 177, 50], [255, 175, 48], [255, 173, 46], [255, 171, 44], [255, 169, 42], [255, 167, 40], [255, 165, 38], [255, 163, 36], [255, 161, 34], [255, 159, 32], [255, 157, 30], [255, 155, 28], [255, 
153, 26], [255, 151, 24], [255, 149, 22], [255, 147, 20], [255, 145, 18], [255, 143, 16], [255, 141, 14], 
[255, 139, 12], [255, 137, 10], [255, 135, 8], [255, 133, 6], [255, 131, 4], [255, 129, 2], [255, 128, 0], [253, 129, 3], [251, 131, 7], [249, 133, 11], [247, 135, 15], [245, 137, 19], [243, 139, 23], [241, 141, 
27], [239, 143, 31], [237, 145, 35], [235, 147, 39], [233, 149, 43], [231, 151, 47], [229, 153, 51], [227, 155, 55], [225, 157, 59], [223, 159, 63], [221, 161, 67], [219, 163, 71], [217, 165, 75], [215, 167, 79], [213, 169, 83], [211, 171, 87], [209, 173, 91], [207, 175, 95], [205, 177, 99], [203, 179, 103], [201, 181, 107], [199, 183, 111], [197, 185, 115], [195, 187, 119], [193, 189, 123], [191, 191, 127], [189, 193, 131], [187, 195, 135], [185, 197, 139], [183, 199, 143], [181, 201, 147], [179, 203, 151], [177, 205, 155], [175, 207, 159], [173, 209, 163], [171, 211, 167], [169, 213, 171], [167, 215, 175], [165, 217, 179], [163, 219, 183], [161, 221, 187], [159, 223, 191], [157, 225, 195], [155, 227, 199], [153, 229, 203], [151, 231, 207], [149, 233, 211], [147, 235, 215], [145, 237, 219], [143, 239, 223], [141, 241, 227], [139, 243, 
231], [137, 245, 235], [135, 247, 239], [133, 249, 243], [131, 251, 247], [129, 253, 251], [128, 255, 255], [128, 253, 255], [128, 251, 255], [128, 249, 255], [128, 247, 255], [128, 245, 255], [128, 243, 255], [128, 241, 255], [128, 239, 255], [128, 237, 255], [128, 235, 255], [128, 233, 255], [128, 231, 255], [128, 
229, 255], [128, 227, 255], [128, 225, 255], [128, 223, 255], [128, 221, 255], [128, 219, 255], [128, 217, 255], [128, 215, 255], [128, 213, 255], [128, 211, 255], [128, 209, 255], [128, 207, 255], [128, 205, 255], [128, 203, 255], [128, 201, 255], [128, 199, 255], [128, 197, 255], [128, 195, 255], [128, 193, 255], [128, 191, 255], [128, 189, 255], [128, 187, 255], [128, 185, 255], [128, 183, 255], [128, 181, 255], [128, 179, 255], [128, 177, 255], [128, 175, 255], [128, 173, 255], [128, 171, 255], [128, 169, 255], [128, 167, 255], [128, 165, 255], [128, 163, 255], [128, 161, 255], [128, 159, 255], [128, 157, 255], [128, 155, 255], [128, 153, 255], [128, 151, 255], [128, 149, 255], [128, 147, 255], [128, 145, 255], [128, 143, 255], 
[128, 141, 255], [128, 139, 255], [128, 137, 255], [128, 135, 255], [128, 133, 255], [128, 131, 255], [128, 129, 255], [128, 128, 255]]


def RGB(index, palette):
    valueR = palette[index][0]
    valueG = palette[index][1]
    valueB = palette[index][2]

    return (valueR,valueG,valueB,255)


# https://stackoverflow.com/questions/6339057/draw-a-transparent-rectangles-and-polygons-in-pygame
def draw_rect_alpha(surface, color, rect):
    shape_surf = pygame.Surface(pygame.Rect(rect).size, pygame.SRCALPHA)
    pygame.draw.rect(shape_surf, color, shape_surf.get_rect())
    surface.blit(shape_surf, rect)

SIZE = 512

zoom = False


pygame.init()
window = pygame.display.set_mode((SIZE, SIZE))
pygame.display.set_caption("Mandelbrot")
fractal = pygame.Surface(window.get_size())
clock = pygame.time.Clock()

xvalues = np.linspace(-2.25,0.75,SIZE)
yvalues = np.linspace(-1.5,1.5,SIZE)

def mandel(c,maxiter):
    z=complex(0,0)
    for iteration in range(maxiter):
        z=(z*z) + c
        if abs(z) > 4:
            return iteration
        pass

    return 0

def draw_fractal(xvalues, yvalues, x1,y1,x2,y2):

    maxiter = 42

    newX1 = xvalues[x1]
    newX2 = xvalues[x2]
    newY1 = yvalues[y1]
    newY2 = yvalues[y2]

    new_xvalues = np.linspace(newX1, newX2, SIZE)
    new_yvalues = np.linspace(newY1, newY2, SIZE)

    xvalues = new_xvalues
    yvalues = new_yvalues

    sx = 0
    sy = 0

    for y in range(len(yvalues)):
        sx = 0
        for x in range(len(xvalues)):
           
            cx = xvalues[x]
            cy = yvalues[y]
        
            c = complex(cx,cy)
            fractal.set_at((sx,sy),(RGB(int(float(mandel(c,maxiter)*255.0)/float(maxiter)), palette)))
            sx = sx + 1
        sy = sy + 1


    return (xvalues,yvalues)

draw_fractal(xvalues, yvalues, 0,0,SIZE-1,SIZE-1)


x1 = 0
y1 = 0
x2 = 0
y2 = 0

drawRect = False

while True:
    clock.tick(60)
    window.blit(fractal,(0,0))

    for event in pygame.event.get():
        if event.type == pygame.QUIT: raise SystemExit

        if event.type == pygame.MOUSEBUTTONDOWN:
            x1 = pygame.mouse.get_pos()[0]
            y1 = pygame.mouse.get_pos()[1]
            drawRect = True
        if event.type == pygame.MOUSEMOTION:
            x2 = pygame.mouse.get_pos()[0]
            y2 = pygame.mouse.get_pos()[1]
    
        if event.type == pygame.MOUSEBUTTONUP:   
            drawRect = False
            zoom = True

    if drawRect == True: draw_rect_alpha(window, (100,100,100,64) , (x1,y1,abs(x1-x2),abs(y1-y2)))
    
    if zoom == True:
        vals = draw_fractal(xvalues, yvalues, x1,y1,x2,y2)
        xvalues = vals[0]
        yvalues = vals[1]
        zoom = False

    pygame.display.flip()        

import pygame
import numpy as np

palette = [[0, 0, 3], [0, 0, 7], [0, 0, 11], [0, 0, 15], [0, 0, 19], [0, 0, 23], [0, 0, 27], [0, 0, 31], [0, 0, 35], [0, 0, 39], [0, 0, 43], [0, 0, 47], [0, 0, 51], [0, 0, 55], [0, 0, 59], [0, 0, 63], [0, 0, 67], [0, 0, 71], [0, 0, 75], [0, 0, 79], [0, 0, 83], [0, 0, 87], [0, 0, 91], [0, 0, 95], [0, 0, 99], [0, 0, 103], [0, 0, 107], [0, 0, 111], [0, 0, 115], [0, 0, 119], [0, 0, 123], [0, 0, 127], [0, 0, 131], [0, 0, 135], [0, 0, 139], [0, 0, 143], [0, 0, 147], [0, 0, 151], [0, 0, 155], [0, 0, 159], [0, 0, 163], [0, 0, 167], [0, 0, 171], [0, 0, 175], [0, 0, 179], [0, 0, 183], [0, 0, 187], [0, 0, 191], [0, 0, 195], [0, 0, 199], [0, 0, 203], [0, 0, 207], [0, 0, 211], [0, 0, 215], [0, 0, 219], [0, 0, 223], [0, 0, 227], [0, 0, 231], [0, 0, 235], [0, 0, 239], [0, 0, 243], [0, 0, 247], [0, 0, 251], [0, 0, 255], [2, 3, 253], [4, 7, 251], [6, 11, 249], [8, 15, 247], [10, 19, 245], [12, 23, 243], [14, 27, 241], [16, 31, 239], [18, 35, 237], [20, 39, 235], [22, 43, 233], [24, 47, 231], [26, 51, 229], [28, 55, 227], [30, 59, 225], [32, 63, 223], [34, 67, 221], [36, 
71, 219], [38, 75, 217], [40, 79, 215], [42, 83, 213], [44, 87, 211], [46, 91, 209], [48, 95, 207], [50, 99, 205], [52, 103, 203], [54, 107, 201], [56, 111, 199], [58, 115, 197], [60, 119, 195], [62, 123, 193], [64, 127, 191], [66, 131, 189], [68, 135, 187], [70, 139, 185], [72, 143, 183], [74, 147, 181], [76, 151, 179], [78, 155, 177], [80, 159, 175], [82, 163, 173], [84, 167, 171], [86, 171, 169], [88, 175, 167], [90, 
179, 165], [92, 183, 163], [94, 187, 161], [96, 191, 159], [98, 195, 157], [100, 199, 155], [102, 203, 153], [104, 207, 151], [106, 211, 149], [108, 215, 147], [110, 219, 145], [112, 223, 143], [114, 227, 141], [116, 231, 139], [118, 235, 137], [120, 239, 135], [122, 243, 133], [124, 247, 131], [126, 251, 129], [128, 255, 128], [129, 255, 128], [131, 255, 128], [133, 255, 128], [135, 255, 128], [137, 255, 128], [139, 255, 128], [141, 255, 128], [143, 255, 128], [145, 255, 128], [147, 255, 128], [149, 255, 128], [151, 255, 128], [153, 255, 128], [155, 255, 128], [157, 255, 128], [159, 255, 128], [161, 255, 128], [163, 255, 128], 
[165, 255, 128], [167, 255, 128], [169, 255, 128], [171, 255, 128], [173, 255, 128], [175, 255, 128], [177, 255, 128], [179, 255, 128], [181, 255, 128], [183, 255, 128], [185, 255, 128], [187, 255, 128], [189, 255, 128], [191, 255, 128], [193, 255, 128], [195, 255, 128], [197, 255, 128], [199, 255, 128], [201, 255, 128], [203, 255, 128], [205, 255, 128], [207, 255, 128], [209, 255, 128], [211, 255, 128], [213, 255, 128], [215, 255, 128], [217, 255, 128], [219, 255, 128], [221, 255, 128], [223, 255, 128], [225, 255, 128], [227, 255, 128], [229, 255, 128], [231, 255, 128], [233, 255, 128], [235, 255, 128], [237, 255, 128], [239, 255, 128], [241, 255, 128], [243, 255, 128], [245, 255, 128], [247, 255, 128], [249, 255, 128], [251, 255, 
128], [253, 255, 128], [255, 255, 128], [255, 253, 129], [255, 251, 131], [255, 249, 133], [255, 247, 135], [255, 245, 137], [255, 243, 139], [255, 241, 141], [255, 239, 143], [255, 237, 145], [255, 235, 147], [255, 233, 149], [255, 231, 151], [255, 229, 153], [255, 227, 155], [255, 225, 157], [255, 223, 159], [255, 
221, 161], [255, 219, 163], [255, 217, 165], [255, 215, 167], [255, 213, 169], [255, 211, 171], [255, 209, 173], [255, 207, 175], [255, 205, 177], [255, 203, 179], [255, 201, 181], [255, 199, 183], [255, 197, 185], [255, 195, 187], [255, 193, 189], [255, 191, 191], [255, 189, 193], [255, 187, 195], [255, 185, 197], [255, 183, 199], [255, 181, 201], [255, 179, 203], [255, 177, 205], [255, 175, 207], [255, 173, 209], [255, 171, 211], [255, 169, 213], [255, 167, 215], [255, 165, 217], [255, 163, 219], [255, 161, 221], [255, 159, 223], [255, 157, 225], [255, 155, 227], [255, 153, 229], [255, 151, 231], [255, 149, 233], [255, 147, 235], [255, 145, 237], [255, 143, 239], [255, 141, 241], [255, 139, 243], [255, 137, 245], [255, 135, 247], 
[255, 133, 249], [255, 131, 251], [255, 129, 253], [255, 128, 255]]


def RGB(index, palette):
    valueR = palette[index][0]
    valueG = palette[index][1]
    valueB = palette[index][2]

    return (valueR,valueG,valueB,255)


# https://stackoverflow.com/questions/6339057/draw-a-transparent-rectangles-and-polygons-in-pygame
def draw_rect_alpha(surface, color, rect):
    shape_surf = pygame.Surface(pygame.Rect(rect).size, pygame.SRCALPHA)
    pygame.draw.rect(shape_surf, color, shape_surf.get_rect())
    surface.blit(shape_surf, rect)

SIZE = 512

zoom = False


pygame.init()
window = pygame.display.set_mode((SIZE, SIZE))
pygame.display.set_caption("Mandelbrot")
fractal = pygame.Surface(window.get_size())
clock = pygame.time.Clock()

xvalues = np.linspace(-2.25,0.75,SIZE)
yvalues = np.linspace(-1.5,1.5,SIZE)

def mandel(c,maxiter):
    z=complex(0,0)
    for iteration in range(maxiter):
        z=(z*z) + c
        if abs(z) > 4:
            
            return iteration

    return 0

def draw_fractal(xvalues, yvalues, x1,y1,x2,y2):

    maxiter = 42

    newX1 = xvalues[x1]
    newX2 = xvalues[x2]
    newY1 = yvalues[y1]
    newY2 = yvalues[y2]

    new_xvalues = np.linspace(newX1, newX2, SIZE)
    new_yvalues = np.linspace(newY1, newY2, SIZE)

    xvalues = new_xvalues
    yvalues = new_yvalues

    sx = 0
    sy = 0

    for y in range(len(yvalues)):
        sx = 0
        for x in range(len(xvalues)):
           
            cx = xvalues[x]
            cy = yvalues[y]
        
            c = complex(cx,cy)
            fractal.set_at((sx,sy),(RGB(int(mandel(c,maxiter)/float(maxiter)*255), palette)))
            sx = sx + 1
        sy = sy + 1


    return (xvalues,yvalues)

draw_fractal(xvalues, yvalues, 0,0,SIZE-1,SIZE-1)


x1 = 0
y1 = 0
x2 = 0
y2 = 0

drawRect = False

while True:
    clock.tick(60)
    window.blit(fractal,(0,0))

    for event in pygame.event.get():
        if event.type == pygame.QUIT: raise SystemExit

        if event.type == pygame.MOUSEBUTTONDOWN:
            x1 = pygame.mouse.get_pos()[0]
            y1 = pygame.mouse.get_pos()[1]
            drawRect = True
        if event.type == pygame.MOUSEMOTION:
            x2 = pygame.mouse.get_pos()[0]
            y2 = pygame.mouse.get_pos()[1]
    
        if event.type == pygame.MOUSEBUTTONUP:   
            drawRect = False
            zoom = True

    if drawRect == True: draw_rect_alpha(window, (100,100,100,64) , (x1,y1,abs(x1-x2),abs(y1-y2)))
    
    if zoom == True:
        vals = draw_fractal(xvalues, yvalues, x1,y1,x2,y2)
        xvalues = vals[0]
        yvalues = vals[1]
        zoom = False

    pygame.display.flip()        
